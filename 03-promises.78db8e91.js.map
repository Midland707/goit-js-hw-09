{"mappings":"qhBAuCA,IAAAA,EAAAC,EAAA,SAYAC,EAAAF,GAASG,OAAOC,QAAQ,qBAExBF,EAAAF,GAASG,OAAOE,QAAQ,iCAExBH,EAAAF,GAASG,OAAOG,QAAQ,2BAExBJ,EAAAF,GAASG,OAAOI,KAAK","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n//   крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//   Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay),\n//   введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//   який виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\n//   в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//   Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// all modules\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\n// e.g. Only message\nNotiflix.Notify.success('Sol lucet omnibus');\n\nNotiflix.Notify.failure('Qui timide rogat docet negare');\n\nNotiflix.Notify.warning('Memento te hominem esse');\n\nNotiflix.Notify.info('Cogito ergo sum');\n"],"names":["$eWCmQ","parcelRequire","$parcel$interopDefault","Notify","success","failure","warning","info"],"version":3,"file":"03-promises.78db8e91.js.map"}