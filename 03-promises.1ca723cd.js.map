{"mappings":"qhBAuCA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAM,GAE1BA,EAAA,GAEP,CAbiBO,SAASC,cAAc,SAe/BC,iBAAiB,UAC1B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAkBL,SAASM,iBAAiB,eAMlD,IAAIb,EADec,OAAOF,EAAgB,GAAGG,OAE7C,MAAMC,EAAOF,OAAOF,EAAgB,GAAGG,OACjCE,EAASH,OAAOF,EAAgB,GAAGG,OAEzC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAC3BpB,EAAcoB,EAAGlB,GACdmB,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAxB,GAASyB,OAAOC,QACd,uBAAuBvB,QAAeC,MAAS,IAGlDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOG,QACd,sBAAsBzB,QAAeC,MAAS,IAGpDA,GAASgB,CAEb","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах,\n//   крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n//   Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay),\n//   введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//   який виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\n//   в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//   Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// all modules\nimport Notiflix from 'notiflix';\nconst fromForm = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfromForm.addEventListener('submit', onFormSubmit);\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const fromFormToInput = document.querySelectorAll('label input');\n  // console.log(event.currentTarget.elements.delay.value);\n  // console.log(fromFormToInput[0].value); //firstDelay\n  // console.log(fromFormToInput[1].value); //step\n  // console.log(fromFormToInput[2].value); //amount\n  const firstDelay = Number(fromFormToInput[0].value);\n  let delay = firstDelay;\n  const step = Number(fromFormToInput[1].value);\n  const amount = Number(fromFormToInput[2].value);\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","fromFormToInput","querySelectorAll","Number","value","step","amount","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.1ca723cd.js.map"}